You are an expert React developer. Build a complete, fully functional Admin Panel for an on-demand service platform (like Uber Eats Manager) using the following tech stack:

React

Vite (React + TypeScript)

Tailwind CSS

Lucide-react for icons

react-router-dom for routing

🌟 Concept:
The platform allows users to book on-demand services (e.g., car washing, electrician, plumber, barber, etc.). Service providers register, get verified, and fulfill jobs. Users pay via the app.

📦 Requirement:
Recreate the UI layout and features from Uber Eats Manager as referenced in the provided ZIP (contains folder structure and images of all UI screens), but adapt it for service providers instead of restaurants.

🧩 Key Features & Tabs:
Dashboard – Overview: number of bookings, earnings, active service providers, user stats.

Service Providers – List, view, edit, verify, activate/deactivate providers.

Bookings – Filter by service type, status (pending, in-progress, completed, cancelled).

Customers – View user profiles, total spending, bookings history.

Payments – Track transactions, payment status, payout history.

Reviews & Ratings – View feedback on service providers.

Support Tickets – Handle support requests from users or service providers.

Service Categories – Create/edit categories like Electrician, Plumber, etc.

Settings – Manage platform settings, terms, app info.

⚙️ Functionality:
Use React Router DOM for tab-based navigation

Dummy data displayed across all pages

Use Tailwind to replicate modern, clean UI (similar to Uber Eats Manager)

Responsive layout

Each component should be modular and reusable

Simulate API calls using dummy data (JSON or local state)

🔧 Output:
Provide a working Vite React + TypeScript project structure with:

Pages for each tab

Sidebar + topbar navigation

Lucide-react icons

Dummy data for services, users, providers, payments, etc.

Modular folder structure: pages, components, data, routes, utils, types

✅ Deliver code for all key pages with working routing and dummy state. Prioritize code readability, performance, and scalability.